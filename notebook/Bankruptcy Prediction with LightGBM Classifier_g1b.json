{
	"name": "Bankruptcy Prediction with LightGBM Classifier_g1b",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3b4d7653-2748-49da-8ebe-ad6b60242d0b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"509ff406-5c76-482b-a6e0-92753ccf839d": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "0.3706",
										"2": "0.4244",
										"3": "0.4057",
										"4": "0.6015",
										"5": "0.6015",
										"6": "0.9990",
										"7": "0.7969",
										"8": "0.8088",
										"9": "0.3026",
										"10": "0.7810",
										"11": "0.0001",
										"12": "0.0000",
										"13": "0.4581",
										"14": "0.0007",
										"15": "0.0000",
										"16": "0.1479",
										"17": "0.1479",
										"18": "0.1479",
										"19": "0.1691",
										"20": "0.3117",
										"21": "0.0176",
										"22": "0.0959",
										"23": "0.1387",
										"24": "0.0221",
										"25": "0.8482",
										"26": "0.6890",
										"27": "0.6890",
										"28": "0.2175",
										"29": "4980000000.0000",
										"30": "0.0003",
										"31": "0.2631",
										"32": "0.3637",
										"33": "0.0023",
										"34": "0.0012",
										"35": "0.6300",
										"36": "0.0213",
										"37": "0.2076",
										"38": "0.7924",
										"39": "0.0050",
										"40": "0.3903",
										"41": "0.0065",
										"42": "0.0959",
										"43": "0.1378",
										"44": "0.3980",
										"45": "0.0870",
										"46": "0.0018",
										"47": "0.0035",
										"48": "0.0002",
										"49": "0.0001",
										"50": "0.0329",
										"51": "0.0342",
										"52": "0.3929",
										"53": "0.0371",
										"54": "0.6728",
										"55": "0.1667",
										"56": "0.1906",
										"57": "0.0041",
										"58": "0.0020",
										"59": "0.0001",
										"60": "0.1473",
										"61": "0.3340",
										"62": "0.2769",
										"63": "0.0010",
										"64": "0.6763",
										"65": "0.7213",
										"66": "0.3391",
										"67": "0.0256",
										"68": "0.9032",
										"69": "0.0020",
										"70": "0.0649",
										"71": "701000000.0000",
										"72": "6550000000.0000",
										"73": "0.5938",
										"74": "458000000.0000",
										"75": "0.6716",
										"76": "0.4242",
										"77": "0.6763",
										"78": "0.3391",
										"79": "0.1265",
										"80": "0.6376",
										"81": "0.4586",
										"82": "0.5204",
										"83": "0.3129",
										"84": "0.1183",
										"85": "0.0000",
										"86": "0.7168",
										"87": "0.0092",
										"88": "0.6229",
										"89": "0.6015",
										"90": "0.8279",
										"91": "0.2902",
										"92": "0.0266",
										"93": "0.5641",
										"94": "1.0000",
										"95": "0.0165"
									},
									{
										"0": "1",
										"1": "0.4643",
										"2": "0.5382",
										"3": "0.5167",
										"4": "0.6102",
										"5": "0.6102",
										"6": "0.9989",
										"7": "0.7974",
										"8": "0.8093",
										"9": "0.3036",
										"10": "0.7815",
										"11": "0.0003",
										"12": "0.0000",
										"13": "0.4619",
										"14": "0.0006",
										"15": "0.0000",
										"16": "0.1823",
										"17": "0.1823",
										"18": "0.1823",
										"19": "0.2089",
										"20": "0.3181",
										"21": "0.0211",
										"22": "0.0937",
										"23": "0.1699",
										"24": "0.0221",
										"25": "0.8481",
										"26": "0.6897",
										"27": "0.6897",
										"28": "0.2176",
										"29": "6110000000.0000",
										"30": "0.0004",
										"31": "0.2645",
										"32": "0.3767",
										"33": "0.0060",
										"34": "0.0040",
										"35": "0.6352",
										"36": "0.0125",
										"37": "0.1712",
										"38": "0.8288",
										"39": "0.0051",
										"40": "0.3768",
										"41": "0.0058",
										"42": "0.0937",
										"43": "0.1690",
										"44": "0.3977",
										"45": "0.0645",
										"46": "0.0013",
										"47": "0.0049",
										"48": "9360000000.0000",
										"49": "719000000.0000",
										"50": "0.0255",
										"51": "0.0069",
										"52": "0.3916",
										"53": "0.0123",
										"54": "0.7511",
										"55": "0.1272",
										"56": "0.1824",
										"57": "0.0149",
										"58": "0.0041",
										"59": "0.0014",
										"60": "0.0570",
										"61": "0.3411",
										"62": "0.2896",
										"63": "0.0052",
										"64": "0.3086",
										"65": "0.7320",
										"66": "0.3297",
										"67": "0.0239",
										"68": "0.9311",
										"69": "0.0022",
										"70": "0.0255",
										"71": "0.0001",
										"72": "7700000000.0000",
										"73": "0.5939",
										"74": "2490000000.0000",
										"75": "0.6716",
										"76": "0.4688",
										"77": "0.3086",
										"78": "0.3297",
										"79": "0.1209",
										"80": "0.6411",
										"81": "0.4590",
										"82": "0.5671",
										"83": "0.3142",
										"84": "0.0478",
										"85": "0.0000",
										"86": "0.7953",
										"87": "0.0083",
										"88": "0.6237",
										"89": "0.6102",
										"90": "0.8400",
										"91": "0.2838",
										"92": "0.2646",
										"93": "0.5702",
										"94": "1.0000",
										"95": "0.0208"
									},
									{
										"0": "1",
										"1": "0.4261",
										"2": "0.4990",
										"3": "0.4723",
										"4": "0.6015",
										"5": "0.6014",
										"6": "0.9989",
										"7": "0.7964",
										"8": "0.8084",
										"9": "0.3020",
										"10": "0.7803",
										"11": "0.0002",
										"12": "25500000.0000",
										"13": "0.4585",
										"14": "0.0008",
										"15": "0.0000",
										"16": "0.1779",
										"17": "0.1779",
										"18": "0.1937",
										"19": "0.1806",
										"20": "0.3071",
										"21": "0.0059",
										"22": "0.0923",
										"23": "0.1428",
										"24": "0.0228",
										"25": "0.8481",
										"26": "0.6895",
										"27": "0.6895",
										"28": "0.2176",
										"29": "7280000000.0000",
										"30": "0.0004",
										"31": "0.2642",
										"32": "0.3689",
										"33": "0.0115",
										"34": "0.0053",
										"35": "0.6296",
										"36": "0.0212",
										"37": "0.2075",
										"38": "0.7925",
										"39": "0.0051",
										"40": "0.3791",
										"41": "0.0066",
										"42": "0.0923",
										"43": "0.1480",
										"44": "0.4066",
										"45": "0.0150",
										"46": "0.0015",
										"47": "0.0042",
										"48": "65000000.0000",
										"49": "2650000000.0000",
										"50": "0.0134",
										"51": "0.0290",
										"52": "0.3820",
										"53": "0.1410",
										"54": "0.8295",
										"55": "0.3402",
										"56": "0.6028",
										"57": "0.0010",
										"58": "0.0063",
										"59": "5340000000.0000",
										"60": "0.0982",
										"61": "0.3367",
										"62": "0.2775",
										"63": "0.0139",
										"64": "0.4460",
										"65": "0.7427",
										"66": "0.3348",
										"67": "0.0037",
										"68": "0.9099",
										"69": "0.0021",
										"70": "0.0214",
										"71": "0.0018",
										"72": "0.0010",
										"73": "0.5945",
										"74": "761000000.0000",
										"75": "0.6716",
										"76": "0.2762",
										"77": "0.4460",
										"78": "0.3348",
										"79": "0.1179",
										"80": "0.6428",
										"81": "0.4593",
										"82": "0.5385",
										"83": "0.3145",
										"84": "0.0253",
										"85": "0.0000",
										"86": "0.7747",
										"87": "0.0400",
										"88": "0.6238",
										"89": "0.6014",
										"90": "0.8368",
										"91": "0.2902",
										"92": "0.0266",
										"93": "0.5637",
										"94": "1.0000",
										"95": "0.0165"
									},
									{
										"0": "1",
										"1": "0.3998",
										"2": "0.4513",
										"3": "0.4577",
										"4": "0.5835",
										"5": "0.5835",
										"6": "0.9987",
										"7": "0.7970",
										"8": "0.8090",
										"9": "0.3033",
										"10": "0.7812",
										"11": "0.0001",
										"12": "0.0000",
										"13": "0.4657",
										"14": "0.0004",
										"15": "0.0000",
										"16": "0.1542",
										"17": "0.1542",
										"18": "0.1542",
										"19": "0.1937",
										"20": "0.3217",
										"21": "0.0144",
										"22": "0.0778",
										"23": "0.1486",
										"24": "0.0220",
										"25": "0.8480",
										"26": "0.6891",
										"27": "0.6891",
										"28": "0.2176",
										"29": "4880000000.0000",
										"30": "0.0004",
										"31": "0.2634",
										"32": "0.3841",
										"33": "0.0042",
										"34": "0.0029",
										"35": "0.6302",
										"36": "0.0096",
										"37": "0.1515",
										"38": "0.8485",
										"39": "0.0050",
										"40": "0.3797",
										"41": "0.0054",
										"42": "0.0777",
										"43": "0.1476",
										"44": "0.3979",
										"45": "0.0900",
										"46": "0.0020",
										"47": "0.0032",
										"48": "7130000000.0000",
										"49": "9150000000.0000",
										"50": "0.0281",
										"51": "0.0155",
										"52": "0.3785",
										"53": "0.0213",
										"54": "0.7258",
										"55": "0.1616",
										"56": "0.2258",
										"57": "0.0189",
										"58": "0.0030",
										"59": "0.0010",
										"60": "0.0987",
										"61": "0.3487",
										"62": "0.2766",
										"63": "0.0035",
										"64": "0.6158",
										"65": "0.7298",
										"66": "0.3315",
										"67": "0.0222",
										"68": "0.9069",
										"69": "0.0018",
										"70": "0.0242",
										"71": "8140000000.0000",
										"72": "6050000000.0000",
										"73": "0.5939",
										"74": "2030000000.0000",
										"75": "0.6715",
										"76": "0.5591",
										"77": "0.6158",
										"78": "0.3315",
										"79": "0.1208",
										"80": "0.5790",
										"81": "0.4485",
										"82": "0.6041",
										"83": "0.3024",
										"84": "0.0672",
										"85": "0.0000",
										"86": "0.7396",
										"87": "0.0033",
										"88": "0.6229",
										"89": "0.5835",
										"90": "0.8347",
										"91": "0.2817",
										"92": "0.0267",
										"93": "0.5647",
										"94": "1.0000",
										"95": "0.0240"
									},
									{
										"0": "1",
										"1": "0.4650",
										"2": "0.5384",
										"3": "0.5223",
										"4": "0.5988",
										"5": "0.5988",
										"6": "0.9990",
										"7": "0.7974",
										"8": "0.8093",
										"9": "0.3035",
										"10": "0.7816",
										"11": "7890000000.0000",
										"12": "0.0000",
										"13": "0.4627",
										"14": "0.0007",
										"15": "0.0000",
										"16": "0.1675",
										"17": "0.1675",
										"18": "0.1675",
										"19": "0.2125",
										"20": "0.3192",
										"21": "0.0297",
										"22": "0.0969",
										"23": "0.1684",
										"24": "0.0221",
										"25": "0.8483",
										"26": "0.6897",
										"27": "0.6897",
										"28": "0.2176",
										"29": "5510000000.0000",
										"30": "0.0004",
										"31": "0.2652",
										"32": "0.3797",
										"33": "0.0060",
										"34": "0.0037",
										"35": "0.6361",
										"36": "0.0051",
										"37": "0.1065",
										"38": "0.8935",
										"39": "0.0053",
										"40": "0.3750",
										"41": "0.0066",
										"42": "0.0969",
										"43": "0.1675",
										"44": "0.4001",
										"45": "0.1754",
										"46": "0.0014",
										"47": "0.0044",
										"48": "0.0002",
										"49": "0.0003",
										"50": "0.0402",
										"51": "0.0581",
										"52": "0.3944",
										"53": "0.0240",
										"54": "0.7518",
										"55": "0.2603",
										"56": "0.3584",
										"57": "0.0142",
										"58": "0.0043",
										"59": "0.0007",
										"60": "0.1102",
										"61": "0.3446",
										"62": "0.2879",
										"63": "0.0049",
										"64": "0.9750",
										"65": "0.7320",
										"66": "0.3307",
										"67": "0.0000",
										"68": "0.9139",
										"69": "0.0022",
										"70": "0.0264",
										"71": "6680000000.0000",
										"72": "5050000000.0000",
										"73": "0.5939",
										"74": "824000000.0000",
										"75": "0.6716",
										"76": "0.3096",
										"77": "0.9750",
										"78": "0.3307",
										"79": "0.1109",
										"80": "0.6224",
										"81": "0.4544",
										"82": "0.5785",
										"83": "0.3116",
										"84": "0.0477",
										"85": "0.0000",
										"86": "0.7950",
										"87": "0.0039",
										"88": "0.6235",
										"89": "0.5988",
										"90": "0.8400",
										"91": "0.2785",
										"92": "0.0248",
										"93": "0.5756",
										"94": "1.0000",
										"95": "0.0355"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "Bankrupt?",
										"type": "string"
									},
									{
										"key": "1",
										"name": " ROA(C) before interest and depreciation before interest",
										"type": "string"
									},
									{
										"key": "2",
										"name": " ROA(A) before interest and % after tax",
										"type": "string"
									},
									{
										"key": "3",
										"name": " ROA(B) before interest and depreciation after tax",
										"type": "string"
									},
									{
										"key": "4",
										"name": " Operating Gross Margin",
										"type": "string"
									},
									{
										"key": "5",
										"name": " Realized Sales Gross Margin",
										"type": "string"
									},
									{
										"key": "6",
										"name": " Operating Profit Rate",
										"type": "string"
									},
									{
										"key": "7",
										"name": " Pre-tax net Interest Rate",
										"type": "string"
									},
									{
										"key": "8",
										"name": " After-tax net Interest Rate",
										"type": "string"
									},
									{
										"key": "9",
										"name": " Non-industry income and expenditure/revenue",
										"type": "string"
									},
									{
										"key": "10",
										"name": " Continuous interest rate (after tax)",
										"type": "string"
									},
									{
										"key": "11",
										"name": " Operating Expense Rate",
										"type": "string"
									},
									{
										"key": "12",
										"name": " Research and development expense rate",
										"type": "string"
									},
									{
										"key": "13",
										"name": " Cash flow rate",
										"type": "string"
									},
									{
										"key": "14",
										"name": " Interest-bearing debt interest rate",
										"type": "string"
									},
									{
										"key": "15",
										"name": " Tax rate (A)",
										"type": "string"
									},
									{
										"key": "16",
										"name": " Net Value Per Share (B)",
										"type": "string"
									},
									{
										"key": "17",
										"name": " Net Value Per Share (A)",
										"type": "string"
									},
									{
										"key": "18",
										"name": " Net Value Per Share (C)",
										"type": "string"
									},
									{
										"key": "19",
										"name": " Persistent EPS in the Last Four Seasons",
										"type": "string"
									},
									{
										"key": "20",
										"name": " Cash Flow Per Share",
										"type": "string"
									},
									{
										"key": "21",
										"name": " Revenue Per Share (Yuan ??)",
										"type": "string"
									},
									{
										"key": "22",
										"name": " Operating Profit Per Share (Yuan ??)",
										"type": "string"
									},
									{
										"key": "23",
										"name": " Per Share Net profit before tax (Yuan ??)",
										"type": "string"
									},
									{
										"key": "24",
										"name": " Realized Sales Gross Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "25",
										"name": " Operating Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "26",
										"name": " After-tax Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "27",
										"name": " Regular Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "28",
										"name": " Continuous Net Profit Growth Rate",
										"type": "string"
									},
									{
										"key": "29",
										"name": " Total Asset Growth Rate",
										"type": "string"
									},
									{
										"key": "30",
										"name": " Net Value Growth Rate",
										"type": "string"
									},
									{
										"key": "31",
										"name": " Total Asset Return Growth Rate Ratio",
										"type": "string"
									},
									{
										"key": "32",
										"name": " Cash Reinvestment %",
										"type": "string"
									},
									{
										"key": "33",
										"name": " Current Ratio",
										"type": "string"
									},
									{
										"key": "34",
										"name": " Quick Ratio",
										"type": "string"
									},
									{
										"key": "35",
										"name": " Interest Expense Ratio",
										"type": "string"
									},
									{
										"key": "36",
										"name": " Total debt/Total net worth",
										"type": "string"
									},
									{
										"key": "37",
										"name": " Debt ratio %",
										"type": "string"
									},
									{
										"key": "38",
										"name": " Net worth/Assets",
										"type": "string"
									},
									{
										"key": "39",
										"name": " Long-term fund suitability ratio (A)",
										"type": "string"
									},
									{
										"key": "40",
										"name": " Borrowing dependency",
										"type": "string"
									},
									{
										"key": "41",
										"name": " Contingent liabilities/Net worth",
										"type": "string"
									},
									{
										"key": "42",
										"name": " Operating profit/Paid-in capital",
										"type": "string"
									},
									{
										"key": "43",
										"name": " Net profit before tax/Paid-in capital",
										"type": "string"
									},
									{
										"key": "44",
										"name": " Inventory and accounts receivable/Net value",
										"type": "string"
									},
									{
										"key": "45",
										"name": " Total Asset Turnover",
										"type": "string"
									},
									{
										"key": "46",
										"name": " Accounts Receivable Turnover",
										"type": "string"
									},
									{
										"key": "47",
										"name": " Average Collection Days",
										"type": "string"
									},
									{
										"key": "48",
										"name": " Inventory Turnover Rate (times)",
										"type": "string"
									},
									{
										"key": "49",
										"name": " Fixed Assets Turnover Frequency",
										"type": "string"
									},
									{
										"key": "50",
										"name": " Net Worth Turnover Rate (times)",
										"type": "string"
									},
									{
										"key": "51",
										"name": " Revenue per person",
										"type": "string"
									},
									{
										"key": "52",
										"name": " Operating profit per person",
										"type": "string"
									},
									{
										"key": "53",
										"name": " Allocation rate per person",
										"type": "string"
									},
									{
										"key": "54",
										"name": " Working Capital to Total Assets",
										"type": "string"
									},
									{
										"key": "55",
										"name": " Quick Assets/Total Assets",
										"type": "string"
									},
									{
										"key": "56",
										"name": " Current Assets/Total Assets",
										"type": "string"
									},
									{
										"key": "57",
										"name": " Cash/Total Assets",
										"type": "string"
									},
									{
										"key": "58",
										"name": " Quick Assets/Current Liability",
										"type": "string"
									},
									{
										"key": "59",
										"name": " Cash/Current Liability",
										"type": "string"
									},
									{
										"key": "60",
										"name": " Current Liability to Assets",
										"type": "string"
									},
									{
										"key": "61",
										"name": " Operating Funds to Liability",
										"type": "string"
									},
									{
										"key": "62",
										"name": " Inventory/Working Capital",
										"type": "string"
									},
									{
										"key": "63",
										"name": " Inventory/Current Liability",
										"type": "string"
									},
									{
										"key": "64",
										"name": " Current Liabilities/Liability",
										"type": "string"
									},
									{
										"key": "65",
										"name": " Working Capital/Equity",
										"type": "string"
									},
									{
										"key": "66",
										"name": " Current Liabilities/Equity",
										"type": "string"
									},
									{
										"key": "67",
										"name": " Long-term Liability to Current Assets",
										"type": "string"
									},
									{
										"key": "68",
										"name": " Retained Earnings to Total Assets",
										"type": "string"
									},
									{
										"key": "69",
										"name": " Total income/Total expense",
										"type": "string"
									},
									{
										"key": "70",
										"name": " Total expense/Assets",
										"type": "string"
									},
									{
										"key": "71",
										"name": " Current Asset Turnover Rate",
										"type": "string"
									},
									{
										"key": "72",
										"name": " Quick Asset Turnover Rate",
										"type": "string"
									},
									{
										"key": "73",
										"name": " Working capitcal Turnover Rate",
										"type": "string"
									},
									{
										"key": "74",
										"name": " Cash Turnover Rate",
										"type": "string"
									},
									{
										"key": "75",
										"name": " Cash Flow to Sales",
										"type": "string"
									},
									{
										"key": "76",
										"name": " Fixed Assets to Assets",
										"type": "string"
									},
									{
										"key": "77",
										"name": " Current Liability to Liability",
										"type": "string"
									},
									{
										"key": "78",
										"name": " Current Liability to Equity",
										"type": "string"
									},
									{
										"key": "79",
										"name": " Equity to Long-term Liability",
										"type": "string"
									},
									{
										"key": "80",
										"name": " Cash Flow to Total Assets",
										"type": "string"
									},
									{
										"key": "81",
										"name": " Cash Flow to Liability",
										"type": "string"
									},
									{
										"key": "82",
										"name": " CFO to Assets",
										"type": "string"
									},
									{
										"key": "83",
										"name": " Cash Flow to Equity",
										"type": "string"
									},
									{
										"key": "84",
										"name": " Current Liability to Current Assets",
										"type": "string"
									},
									{
										"key": "85",
										"name": " Liability-Assets Flag",
										"type": "string"
									},
									{
										"key": "86",
										"name": " Net Income to Total Assets",
										"type": "string"
									},
									{
										"key": "87",
										"name": " Total assets to GNP price",
										"type": "string"
									},
									{
										"key": "88",
										"name": " No-credit Interval",
										"type": "string"
									},
									{
										"key": "89",
										"name": " Gross Profit to Sales",
										"type": "string"
									},
									{
										"key": "90",
										"name": " Net Income to Stockholder's Equity",
										"type": "string"
									},
									{
										"key": "91",
										"name": " Liability to Equity",
										"type": "string"
									},
									{
										"key": "92",
										"name": " Degree of Financial Leverage (DFL)",
										"type": "string"
									},
									{
										"key": "93",
										"name": " Interest Coverage Ratio (Interest expense to EBIT)",
										"type": "string"
									},
									{
										"key": "94",
										"name": " Net Income Flag",
										"type": "string"
									},
									{
										"key": "95",
										"name": " Equity to Liability",
										"type": "string"
									}
								]
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "count",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								},
								"evaluatesOverAllRecords": false
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Bankruptcy Prediction with LightGBM Classifier\r\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Introduction of LightGBM\n",
					"[LightGBM](https://github.com/Microsoft/LightGBM) is an open-source, distributed, high-performance gradient boosting framework with following advantages: \n",
					"-   Composability: LightGBM models can be incorporated into existing\n",
					"    SparkML Pipelines, and used for batch, streaming, and serving\n",
					"    workloads.\n",
					"-   Performance: LightGBM on Spark is 10-30% faster than SparkML on\n",
					"    the Higgs dataset, and achieves a 15% increase in AUC.  [Parallel\n",
					"    experiments](https://github.com/Microsoft/LightGBM/blob/master/docs/Experiments.rst#parallel-experiment)\n",
					"    have verified that LightGBM can achieve a linear speed-up by using\n",
					"    multiple machines for training in specific settings.\n",
					"-   Functionality: LightGBM offers a wide array of [tunable\n",
					"    parameters](https://github.com/Microsoft/LightGBM/blob/master/docs/Parameters.rst),\n",
					"    that one can use to customize their decision tree system. LightGBM on\n",
					"    Spark also supports new types of problems such as quantile regression.\n",
					"-   Cross platform：LightGBM on Spark is available on Spark (Scala) and PySpark (Python).\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"\n",
					"<img src=\"https://mmlspark.blob.core.windows.net/graphics/Documentation/bankruptcy image.png\" width=\"800\" style=\"float: center;\"/>\n",
					"\n",
					"In this example, we use LightGBM to build a classification model in order to predict bankruptcy."
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Read dataset\r\n",
					"\r\n",
					"Get a sample data of financial statements for 6819 companies, 220 represents bankrupted companies while 6599 firms are not bankrupted. "
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"dataset = spark.read.format(\"csv\")\\\n",
					"  .option(\"header\", True)\\\n",
					"  .load(\"wasbs://publicwasb@mmlspark.blob.core.windows.net/company_bankruptcy_prediction_data.csv\")"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Exploratory data\r\n",
					"\r\n",
					"Look at the data and evaluate its suitability for use in a model."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(dataset.head(5))"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# print dataset size\r\n",
					"print(\"Total number of records: \" + str(dataset.count()))"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# convert features to double type\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import DoubleType\n",
					"for colName in dataset.columns:\n",
					"  dataset = dataset.withColumn(colName, col(colName).cast(DoubleType()))\n",
					"print(\"Schema: \")\n",
					"dataset.printSchema()"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Generation of testing and training data sets\r\n",
					"\r\n",
					"Simple split, 85% for training and 15% for testing the model. Playing with this ratio may result in different models.\r\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Split the dataset into train and test\n",
					"\n",
					"train, test = dataset.randomSplit([0.70, 0.30], seed=1)\n",
					"\n",
					"# Add featurizer to convert features to vector\n",
					"\n",
					"from pyspark.ml.feature import VectorAssembler\n",
					"feature_cols = dataset.columns[1:]\n",
					"featurizer = VectorAssembler(\n",
					"    inputCols=feature_cols,\n",
					"    outputCol='features'\n",
					")\n",
					"train_data = featurizer.transform(train)['Bankrupt?', 'features']\n",
					"test_data = featurizer.transform(test)['Bankrupt?', 'features']"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"# check if the data is unbalanced\r\n",
					"train_data.groupBy(\"Bankrupt?\").count().show()"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Train the model\r\n",
					"Train the Classifier model."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.lightgbm import LightGBMClassifier\n",
					"\n",
					"model = LightGBMClassifier(objective=\"binary\", featuresCol=\"features\", labelCol=\"Bankrupt?\", isUnbalance=True)\n",
					"model = model.fit(train_data)"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"from mmlspark.lightgbm import LightGBMClassificationModel\n",
					"model.saveNativeModel(\"/lgbmcmodel\")\n",
					"model = LightGBMClassificationModel.loadNativeModelFromFile(\"/lgbmcmodel\")"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"print(model.getFeatureImportances())"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Model Performance Evaluation\r\n",
					"\r\n",
					"After training the model, we evaluate the performance of the model using the test set."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"predictions = model.transform(test_data)\n",
					"#predictions.limit(10).toPandas()"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from mmlspark.train import ComputeModelStatistics\r\n",
					"\r\n",
					"# Compute model performance metrics\r\n",
					"metrics = ComputeModelStatistics(evaluationMetric=\"classification\", \r\n",
					"                                 labelCol=\"prediction\", \r\n",
					"                                 scoredLabelsCol=\"Bankrupt?\").transform(predictions)\r\n",
					"metrics.toPandas()"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Clean up resources\r\n",
					"To ensure the Spark instance is shut down, end any connected sessions(notebooks). The pool shuts down when the **idle time** specified in the Apache Spark pool is reached. You can also select **stop session** from the status bar at the upper right of the notebook.\r\n",
					"\r\n",
					"![stopsession](https://adsnotebookrelease.blob.core.windows.net/adsnotebookrelease/adsnotebook/image/stopsession.png)"
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Next steps\r\n",
					"\r\n",
					"* [Check out Synapse sample notebooks](https://github.com/Azure-Samples/Synapse/tree/main/MachineLearning) \r\n",
					"* [MMLSpark GitHub Repo](https://github.com/Azure/mmlspark)"
				],
				"attachments": null
			}
		]
	}
}